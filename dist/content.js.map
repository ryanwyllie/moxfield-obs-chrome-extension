{"version":3,"file":"content.js","mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://moxfield-obs-chrome-extension/./src/ports.ts","webpack://moxfield-obs-chrome-extension/webpack/bootstrap","webpack://moxfield-obs-chrome-extension/./src/content.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BATTLEFIELD_WINDOW_PORT_NAME = void 0;\nexports.BATTLEFIELD_WINDOW_PORT_NAME = 'obs-window';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ports_1 = require(\"./ports\");\nchrome.runtime.onConnect.addListener((port) => {\n    if (port.name !== ports_1.BATTLEFIELD_WINDOW_PORT_NAME) {\n        return;\n    }\n    const elements = findElements();\n    if (!elements) {\n        return;\n    }\n    const { battlefieldElement, cardSizeElement } = elements;\n    port.postMessage({\n        type: 'BATTLEFIELD_STYLES',\n        hrefs: Array.from(document.styleSheets).map(s => s.href).filter(href => !!href)\n    });\n    // Send initial card size.\n    const { height, width } = getCardSize(cardSizeElement);\n    port.postMessage({\n        type: 'BATTLEFIELD_CARD_SIZE',\n        height,\n        width,\n    });\n    // Set up observer for card size changes.\n    const cardSizeObserver = new MutationObserver(() => {\n        const { height, width } = getCardSize(cardSizeElement);\n        port.postMessage({\n            type: 'BATTLEFIELD_CARD_SIZE',\n            height,\n            width,\n        });\n    });\n    cardSizeObserver.observe(cardSizeElement, {\n        attributes: true,\n    });\n    // Send initial battlefield content\n    port.postMessage({\n        type: 'BATTLEFIELD_UPDATE',\n        content: battlefieldElement.outerHTML\n    });\n    // Set up observer for battlefield changes\n    const battlefieldContentObserver = new MutationObserver(() => {\n        port.postMessage({\n            type: 'BATTLEFIELD_UPDATE',\n            content: battlefieldElement.outerHTML\n        });\n    });\n    battlefieldContentObserver.observe(battlefieldElement, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        characterData: true\n    });\n    port.onDisconnect.addListener(() => {\n        battlefieldContentObserver.disconnect();\n    });\n});\nfunction findElements() {\n    const mainContentElement = document.getElementById('maincontent');\n    if (!mainContentElement) {\n        return;\n    }\n    const battlefieldElement = mainContentElement?.querySelector('.battlefield');\n    if (!battlefieldElement || !(battlefieldElement instanceof HTMLElement)) {\n        return;\n    }\n    for (const child of Array.from(mainContentElement.children)) {\n        if (child instanceof HTMLElement && child.style.getPropertyValue('--card-height')) {\n            return {\n                cardSizeElement: child,\n                battlefieldElement: battlefieldElement,\n            };\n        }\n    }\n}\nfunction getCardSize(cardSizeElement) {\n    const heightStr = cardSizeElement.style.getPropertyValue('--card-height');\n    const widthStr = cardSizeElement.style.getPropertyValue('--card-width');\n    return {\n        height: parseInt(heightStr.replace('px', ''), 10),\n        width: parseInt(widthStr.replace('px', ''), 10),\n    };\n}\n"],"names":[],"sourceRoot":""}